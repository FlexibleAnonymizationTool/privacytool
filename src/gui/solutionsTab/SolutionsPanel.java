/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package privacytool.gui.solutionsTab;

import edu.uci.ics.jung.algorithms.layout.StaticLayout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.visualization.GraphZoomScrollPane;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.CrossoverScalingControl;
import edu.uci.ics.jung.visualization.control.GraphMouseListener;
import edu.uci.ics.jung.visualization.control.ScalingControl;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Paint;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections15.Transformer;
import privacytool.framework.algorithms.flash.LatticeNode;
import privacytool.framework.data.Data;
import privacytool.framework.hierarchy.Hierarchy;
import privacytool.gui.ErrorWindow;
import privacytool.gui.resultsTab.AnonymizedDatasetPanel;

/**
 *
 * @author serafeim
 */
public class SolutionsPanel extends javax.swing.JPanel {

    /**
     * Creates new form ResultsPanel
     */
    public SolutionsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GraphPanel = new javax.swing.JPanel();
        ButtonsPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Solutions"));
        setPreferredSize(new java.awt.Dimension(1520, 687));

        javax.swing.GroupLayout GraphPanelLayout = new javax.swing.GroupLayout(GraphPanel);
        GraphPanel.setLayout(GraphPanelLayout);
        GraphPanelLayout.setHorizontalGroup(
            GraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1484, Short.MAX_VALUE)
        );
        GraphPanelLayout.setVerticalGroup(
            GraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 587, Short.MAX_VALUE)
        );

        jButton1.setText("Apply");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("No solution selected");

        jButton3.setText("Zoom Out");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Zoom In");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setText("-");

        javax.swing.GroupLayout ButtonsPanelLayout = new javax.swing.GroupLayout(ButtonsPanel);
        ButtonsPanel.setLayout(ButtonsPanelLayout);
        ButtonsPanelLayout.setHorizontalGroup(
            ButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ButtonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );
        ButtonsPanelLayout.setVerticalGroup(
            ButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ButtonsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GraphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(GraphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("Solutions");
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(this.selectedNode == null){
            ErrorWindow.showErrorWindow("Please first select a solution");
            return;
        }

        this.anonymizedDatasetPanel.setDataset(this.dataset);
        this.anonymizedDatasetPanel.setQuasiIdentifiers(this.quasiIdentifiers);
        this.anonymizedDatasetPanel.setSolution(selectedNode);
        this.anonymizedDatasetPanel.renderInitialTable();
        this.anonymizedDatasetPanel.renderAnonymizedTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if(viewer != null)
            scaler.scale(viewer, 1.1f, viewer.getCenter());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(viewer != null)
            scaler.scale(viewer, 1/1.1f, viewer.getCenter());
    }//GEN-LAST:event_jButton3ActionPerformed

    public void presentAnonymityResults(Graph<LatticeNode, Integer> graph, final Map<LatticeNode, Integer> levels, 
            final Map<LatticeNode, Integer> positions, final Set<LatticeNode> resultset, final List<Integer> numNodesInLevel){
        
        GraphPanel.removeAll();
        fillQuasiIdsLabel();
        
        Dimension dim = GraphPanel.getSize();
        final double dimensionX = dim.getWidth();
        final double dimensionY = dim.getHeight();
        final int DIMENSION_Y_SPACE = 50;
        final int DIMENSION_X_SPACE = 50;
        
        final double plus_height = (dimensionY - 2*DIMENSION_Y_SPACE) / (numNodesInLevel.size() -1);
   
        Transformer<LatticeNode, Point2D> locationTransformer = new Transformer<LatticeNode, Point2D>() {

            @Override
            public Point2D transform(LatticeNode vertex) {
                //compute y
                int y_pos = DIMENSION_Y_SPACE;
                for(int i=0; i<levels.get(vertex); i++){
                    y_pos += plus_height;
                }
                
                //compute x
                int x_pos = DIMENSION_X_SPACE;
                int pos = positions.get(vertex);
                double plus_width = (dimensionX - 2*DIMENSION_X_SPACE) / (numNodesInLevel.get(levels.get(vertex)) + 1);
//                System.out.println(plus_width);
                for(int i=0; i<pos+1; i++){
                    x_pos += plus_width;
                }
//                System.out.println(vertex + " " + x_pos + " " + (dimensionY - y_pos));
                return new Point2D.Double((double) x_pos, dimensionY - y_pos);
            }
        };

        Transformer<LatticeNode, Paint> vertexColor = new Transformer<LatticeNode, Paint>() {
            @Override
            public Paint transform(LatticeNode vertex) {
                if(vertex.equals(selectedNode)) return Color.BLUE;
                if(resultset.contains(vertex)) return Color.GREEN;
                return Color.RED;
            }
        };
        
        
        
        StaticLayout<LatticeNode, Integer> layout = new StaticLayout<>(
                graph, locationTransformer);
        layout.setSize(new Dimension((int)dimensionX, (int)dimensionY));
        final VisualizationViewer<LatticeNode, Integer> vv = new VisualizationViewer<>(
                layout);
        vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        vv.getRenderContext().setVertexFillPaintTransformer(vertexColor);
        vv.setPreferredSize(new Dimension((int)dimensionX, (int)dimensionY));
        vv.addGraphMouseListener(new GraphMouseListener() {

            @Override
            public void graphClicked(Object v, MouseEvent me) {
                if (me.getButton() == MouseEvent.BUTTON1 && me.getClickCount() == 1) {
                    selectedNode = (LatticeNode)v;
//                    System.out.println(selectedNode + " node selected");
                    jLabel1.setText(selectedNode + " selected");
                    vv.repaint();
                }
                me.consume();
            }

            @Override
            public void graphPressed(Object v, MouseEvent me) {

            }

            @Override
            public void graphReleased(Object v, MouseEvent me) {
                
            }
        });
        
        this.viewer = vv;
        GraphZoomScrollPane scrollPane = new GraphZoomScrollPane(viewer);

        BorderLayout panelMapLayout = new BorderLayout();
        GraphPanel.setLayout(panelMapLayout);
        GraphPanel.add(scrollPane, BorderLayout.CENTER);

    }
        
    public void setAnonymizedDatasetPanel(AnonymizedDatasetPanel anonymizedDatasetPanel1) {
        this.anonymizedDatasetPanel = anonymizedDatasetPanel1;
    }
    
    public void setDataset(Data dataset) {
        this.dataset = dataset;
    }
        
    public void setQuasiIdentifiers(Map<Integer, Hierarchy> quasiIdentifiers) {
        this.quasiIdentifiers = quasiIdentifiers;
    }
        
    private void fillQuasiIdsLabel(){
        String label = "";
        Map<Integer, String> columnNames = this.dataset.getColumnsPosition();
        for(Integer column : this.quasiIdentifiers.keySet()){
            label += columnNames.get(column) + " ";
        }
        label = label.trim();
        this.jLabel2.setText(label);
    }
    
    private LatticeNode selectedNode = null;
    private AnonymizedDatasetPanel anonymizedDatasetPanel = null;
    private Data dataset = null;
    private Map<Integer, Hierarchy> quasiIdentifiers = null;
    
    ScalingControl scaler = new CrossoverScalingControl();
    VisualizationViewer viewer = null;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonsPanel;
    private javax.swing.JPanel GraphPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
