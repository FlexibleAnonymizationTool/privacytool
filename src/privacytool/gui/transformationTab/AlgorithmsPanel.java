/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package privacytool.gui.transformationTab;

import edu.uci.ics.jung.graph.Graph;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import privacytool.framework.algorithms.Algorithm;
import privacytool.framework.algorithms.flash.Flash;
import privacytool.framework.algorithms.flash.LatticeNode;
import privacytool.framework.algorithms.incognito.Incognito;
import privacytool.framework.data.Data;
import privacytool.framework.hierarchy.Hierarchy;
import privacytool.framework.hierarchy.ranges.Range;
import privacytool.gui.ErrorWindow;
import privacytool.gui.solutionsTab.SolutionsPanel;

/**
 *
 * @author serafeim
 */
public class AlgorithmsPanel extends javax.swing.JPanel {
    
    Map<Integer, Hierarchy> quasiIdentifiers = null;
    Data dataset = null;
    SolutionsPanel solutionsPanel = null;
    
    /**
     * Creates new form AlgorithmsPanel
     */
    public AlgorithmsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        algorithmsComboBox = new javax.swing.JComboBox();
        executeButton = new javax.swing.JButton();
        kTextField = new javax.swing.JTextField();
        kLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Algorithms"));

        algorithmsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Incognito", "Flash" }));
        algorithmsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmsComboBoxActionPerformed(evt);
            }
        });

        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteActionPerformed(evt);
            }
        });

        kTextField.setText("2");
        kTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kTextFieldActionPerformed(evt);
            }
        });

        kLabel.setText("k:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(kLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kTextField))
                    .addComponent(algorithmsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 294, Short.MAX_VALUE)
                .addComponent(executeButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(algorithmsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(executeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kLabel))
                .addGap(0, 42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void algorithmsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmsComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_algorithmsComboBoxActionPerformed

    private void ExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteActionPerformed
        solutionsPanel.setVisible(true);
        
        if(dataset == null){
            ErrorWindow.showErrorWindow("Please load dataset first");
            return;
        }
        if(quasiIdentifiers == null){
            ErrorWindow.showErrorWindow("Please set hierarchies to QIs");
            return;
        }
        
        
        if(!checkHierachies())
            return;
        
        System.out.println("Check passed");
        
        String algorithmSelected = algorithmsComboBox.getSelectedItem().toString();
        Algorithm algorithm = null;
        int k = 0;
        try { 
            k = Integer.parseInt(kTextField.getText()); 
        } catch(NumberFormatException e) { 
            ErrorWindow.showErrorWindow("k must be an integer");
            return; 
        }
        
        if(algorithmSelected.equals("Incognito")){
            algorithm = new Incognito();
        }
        else if(algorithmSelected.equals("Flash")){
            algorithm = new Flash();
        }  
        
        if(algorithm == null){
            return;
        }   
            
        algorithm.setDataset(dataset);
        algorithm.setHierarchies(quasiIdentifiers);

        Map<String, Integer> args = new HashMap<>();
        args.put("k", k);
        algorithm.setArguments(args);
        
        long startTime = System.currentTimeMillis();
        
        Set resultset = (Set)algorithm.anonymize();
        
        if(resultset == null)
            return;
        
        long endTime   = System.currentTimeMillis();
        long totalTime = endTime - startTime;
        System.out.println("algorithm took : " + totalTime);  
        
        Map<LatticeNode, Integer> levels = new HashMap<>();
        Map<LatticeNode, Integer> positions = new HashMap<>();
        List<Integer> numNodesInLevel = new ArrayList<>();
        Graph graph = algorithm.getLattice(levels, positions, numNodesInLevel);

        solutionsPanel.setDataset(this.dataset);
        solutionsPanel.setQuasiIdentifiers(this.quasiIdentifiers);
        solutionsPanel.presentAnonymityResults(graph, levels, positions, resultset, numNodesInLevel);
           
        
    }//GEN-LAST:event_ExecuteActionPerformed

    private void kTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmsComboBox;
    private javax.swing.JButton executeButton;
    private javax.swing.JLabel kLabel;
    private javax.swing.JTextField kTextField;
    // End of variables declaration//GEN-END:variables

    public void setQuasiIdentifiers(Map<Integer, Hierarchy> _quasiIdentifiers) {
        quasiIdentifiers = _quasiIdentifiers;
    }
    
    public void setDataset(Data _dataset){
        dataset = _dataset;        
    }
    
    public void setResultsPanel(SolutionsPanel _rpanel){
        this.solutionsPanel = _rpanel;
    }

    private boolean checkHierachies(){
        for(Integer column : this.quasiIdentifiers.keySet()){
            
            Hierarchy h = this.quasiIdentifiers.get(column);
            
            if(h.getHierarchyType().equals("distinct")){
                switch (h.getNodesType()) {
                    case "string":
                        //build dictionary of string hierarchy
                        h.buildDictionary();

                        //check if column's dictionary is subset of hierarchy's dictionary
                        String s = dataset.getDictionary(column).isSubsetOf(h.getDictionary());
                        if(s != null){
                            String columnName = dataset.getColumnsPosition().get(column);
                            String hierarchyName = h.getName();
                            ErrorWindow.showErrorWindow("Value " + s +" of column " +
                                    columnName + " is not present in hierarchy " + hierarchyName);
                            return false;
                        }
                        else{
                            //replace dictionary of column and update values taken from the new one
                            dataset.replaceColumnDictionary(column, h.getDictionary());
                        }   

                        break;

                    case "int":
                    case "double":

                        //check if hierarchy contains all column's elements
                        for(double[] row : dataset.getData()){
                            if(!h.contains(row[column])){
                                String columnName = dataset.getColumnsPosition().get(column);
                                String hierarchyName = h.getName();
                                ErrorWindow.showErrorWindow("Value " + row[column] +" of column " +
                                        columnName + " is not present in hierarchy " + hierarchyName);
                                return false;
                            }
                        }

                        break;
                }
            }
            else if(h.getHierarchyType().equals("range")){
                
                Range root = (Range)h.getRoot();
                
                //check if root range contains all column's elements
                for(double[] row : dataset.getData()){
                    if(!root.contains(row[column])){
                        String columnName = dataset.getColumnsPosition().get(column);
                        String hierarchyName = h.getName();
                        ErrorWindow.showErrorWindow("Value " + row[column] +" of column " +
                                columnName + " is not present in root range of hierarchy " + hierarchyName);
                        return false;
                    }
                }
            }
        }
        return true;
    }
}
